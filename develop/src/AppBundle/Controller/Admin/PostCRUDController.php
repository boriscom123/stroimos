<?php

namespace AppBundle\Controller\Admin;

use Doctrine\DBAL\DBALException;
use Sonata\AdminBundle\Datagrid\ProxyQueryInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;

class PostCRUDController extends TopMenuCRUDController
{
    public function restoreAction($id = null)
    {
        $this
            ->admin->getModelManager()
            ->getEntityManager($this->admin->getClass())
            ->getFilters()
            ->disable('not_moved_to_trash');
        ;

        $notFound = $id === null || !($object = $this->admin->getObject($id));
        if ($notFound) {
            throw new NotFoundHttpException(sprintf('unable to find the object with id : %s', $id));
        }

        if (false === $this->admin->isGranted('EDIT', $object)) {
            throw new AccessDeniedException();
        }

        $object->restore();
        $this->admin->getModelManager()->update($object);

        $this->addFlash(
            'sonata_flash_success',
            $this->admin->trans(
                'flash_restore_success',
                [],
                'SonataAdminBundle'
            )
        );

        $url = $this->admin->generateObjectUrl('edit', $object);
        return new RedirectResponse($url);
   }


    public function editAction($id = null)
    {
        $this
            ->admin->getModelManager()
            ->getEntityManager($this->admin->getClass())
            ->getFilters()
            ->disable('not_moved_to_trash');
        ;

        return parent::editAction($id); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function batchActionDelete(ProxyQueryInterface $query)
    {
        if (false === $this->admin->isGranted('DELETE')) {
            throw new AccessDeniedException();
        }
        $categoryAlias = $this->getAdmin()->getPersistentParameter('category_alias');
        if ('trash' === $categoryAlias) {
            return parent::batchActionDelete($query);
        }

        $modelManager = $this->admin->getModelManager();
        try {
            $query->select('DISTINCT '.$query->getRootAlias());
            $entityManager = $modelManager->getEntityManager($this->admin->getClass());
            $now = new \DateTime();

            $i = 0;
            foreach ($query->getQuery()->iterate() as $pos => $object) {
                $object[0]->setDeletedAt($now);

                if ((++$i % 20) == 0) {
                    $entityManager->flush();
                    $entityManager->clear();
                }
            }

            $entityManager->flush();
            $entityManager->clear();
            $this->addFlash('sonata_flash_success', 'flash_batch_delete_success');
        } catch (\PDOException $e) {
            $this->addFlash('sonata_flash_error', 'flash_batch_delete_error');
        } catch (DBALException $e) {
            $this->addFlash('sonata_flash_error', 'flash_batch_delete_error');
        }


        return new RedirectResponse(
            $this->admin->generateUrl(
                'list',
                array('filter' => $this->admin->getFilterParameters())
            )
        );
    }

    public function batchActionRestore(ProxyQueryInterface $query)
    {
        $modelManager = $this->admin->getModelManager();
        try {
            $query->select('DISTINCT '.$query->getRootAlias());
            $entityManager = $modelManager->getEntityManager($this->admin->getClass());

            $i = 0;
            foreach ($query->getQuery()->iterate() as $pos => $object) {
                $object[0]->restore();

                if ((++$i % 20) == 0) {
                    $entityManager->flush();
                    $entityManager->clear();
                }
            }

            $entityManager->flush();
            $entityManager->clear();
            $this->addFlash('sonata_flash_success', 'flash_batch_delete_success');
        } catch (\PDOException $e) {
            $this->addFlash('sonata_flash_error', 'flash_batch_delete_error');
        } catch (DBALException $e) {
            $this->addFlash('sonata_flash_error', 'flash_batch_delete_error');
        }

        return new RedirectResponse(
            $this->admin->generateUrl(
                'list',
                array('filter' => $this->admin->getFilterParameters())
            )
        );
    }

    public function deleteAction($id)
    {
        $this
            ->admin->getModelManager()
            ->getEntityManager($this->admin->getClass())
            ->getFilters()
            ->disable('not_moved_to_trash');
        ;

        return parent::deleteAction($id);
    }
}
