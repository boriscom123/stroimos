<?php

namespace AppBundle\Admin;

use Amg\DataCore\Model\Entitled\EntitledInterface;
use Amg\DataCore\Model\Identifiable\IdentifiableInterface;
use Amg\DataCore\Model\Publishable\PublishableInterface;
use Amg\DataCore\Model\PublishingPeriod\PublishingPeriodInterface;
use Sonata\AdminBundle\Route\RouteCollection;

abstract class AdminWithNotifications extends BaseAdmin
{
    const NOTIFICATIONS_COUNT_LIMIT = 1;
    const NOTIFICATION_ACTION_NAME = 'sendNotification';
    const NOTIFICATION_ACTION_TEMPLATE = ':Admin:Post/list__action_send_notification.html.twig';

    protected function configureRoutes(RouteCollection $collection)
    {
        parent::configureRoutes($collection);
        $collection->add(
            self::NOTIFICATION_ACTION_NAME,
            $this->getRouterIdParameter() . '/' . self::NOTIFICATION_ACTION_NAME
        );
    }

    public function generateUrl($name, array $parameters = array(), $absolute = false)
    {
        return parent::generateUrl($name, $parameters, $absolute); // TODO: Change the autogenerated stub
    }


    /**
     * @param $subject
     * @return bool
     */
    public function getNotificationsAllowed($subject)
    {
        $container = $this->getConfigurationPool()->getContainer();

        //check required params
        if($container->getParameter('sendpulse_id') === null ||
            $container->getParameter('sendpulse_secret') === null) {

            return false;
        }

        //check access rights
        if(!$container->get('security.authorization_checker')->isGranted('ROLE_NOTIFICATION_SENDER')) {
            return false;
        }

        //check entity requirements
        if($subject instanceof PublishableInterface) {
            if(!$subject->isPublishable()) {
                return false;
            }
        } else {
            return false;
        }

        if($subject instanceof PublishingPeriodInterface) {
            $now = new \DateTime();
            if($subject->getPublishStartDate() > $now ||
                ($subject->getPublishEndDate() !== null && $subject->getPublishEndDate() < $now))
            {
                return false;
            }
        }

        if(!$subject instanceof IdentifiableInterface || !$subject instanceof EntitledInterface) {
            return false;
        }

        //check notifications counter
        if($this->getNotificationsCount($subject->getId()) >= self::NOTIFICATIONS_COUNT_LIMIT) {
            return false;
        }

        return true;
    }

    /**
     * @param $postId
     * @return int
     */
    public function getNotificationsCount($postId)
    {
        $repo = $this->getConfigurationPool()->getContainer()->get('doctrine')->getRepository('AppBundle:Notification');

        return $repo->getTotalCount($postId, $this->getLabel());
    }
}
